
services:
  # PostgreSQL database for Airflow
  postgres:
    image: postgres:13
    container_name: velib-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - velib-network

  # Airflow database initialization
  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: velib-airflow-init
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: 'J-fVmuF9XFmMoS82Hj7g5SOD4V_R4ugL3PH9DhMARNA='
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    volumes:
      - ./dags:/opt/airflow/dags
      - ../../local/logs:/opt/airflow/logs
      - ../../local/logs/scheduler:/opt/airflow/logs/scheduler
      - ../../local/logs/dag_processor_manager:/opt/airflow/logs/dag_processor_manager
      - ./config:/opt/airflow/config
      - ./plugins:/opt/airflow/plugins
    user: "${AIRFLOW_UID:-50000}:0"
    command: >
      bash -c "
      airflow db init && 
      airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com &&
      airflow connections add 'velib_fastapi' --conn-type 'http' --conn-host 'http://host.docker.internal:8001'"
    networks:
      - velib-network

  # Airflow services
  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: velib-airflow-webserver
    restart: always
    depends_on:
      - postgres
      - airflow-init
    ports:
      - "8880:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: 'J-fVmuF9XFmMoS82Hj7g5SOD4V_R4ugL3PH9DhMARNA='
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      VELIB_FASTAPI_URL: http://host.docker.internal:8001
      VELIB_RETRAIN_ENDPOINT: /admin/retrain
      VELIB_REFRESH_ENDPOINT: /admin/refresh
    volumes:
      - ./dags:/opt/airflow/dags
      - ../../local/logs:/opt/airflow/logs
      - ./config:/opt/airflow/config
      - ./plugins:/opt/airflow/plugins
    user: "${AIRFLOW_UID:-50000}:0"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - velib-network

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: velib-airflow-scheduler
    restart: always
    depends_on:
      - postgres
      - airflow-init
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: 'J-fVmuF9XFmMoS82Hj7g5SOD4V_R4ugL3PH9DhMARNA='
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      VELIB_FASTAPI_URL: http://host.docker.internal:8001
    volumes:
      - ./dags:/opt/airflow/dags
      - ../../local/logs:/opt/airflow/logs
      - ./config:/opt/airflow/config
      - ./plugins:/opt/airflow/plugins
    user: "${AIRFLOW_UID:-50000}:0"
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - velib-network

volumes:
  postgres-db-volume:

networks:
  velib-network:
    driver: bridge
