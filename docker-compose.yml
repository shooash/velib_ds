version: '3.8'

services:
  # PostgreSQL database for Airflow
  postgres:
    image: postgres:13
    container_name: velib-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - velib-network

  # Airflow services
  airflow-webserver:
    build:
      context: ./services/airflow
      dockerfile: Dockerfile
    container_name: velib-airflow-webserver
    restart: always
    depends_on:
      - postgres
      - fastapi_big
    ports:
      - "8080:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      VELIB_FASTAPI_URL: http://fastapi_big:8000
      VELIB_RETRAIN_ENDPOINT: /admin/retrain
      VELIB_REFRESH_ENDPOINT: /admin/refresh
    volumes:
      - ./services/airflow/dags:/opt/airflow/dags
      - ./services/airflow/logs:/opt/airflow/logs
      - ./services/airflow/config:/opt/airflow/config
      - ./services/airflow/plugins:/opt/airflow/plugins
    user: "${AIRFLOW_UID:-50000}:0"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - velib-network

  airflow-scheduler:
    build:
      context: ./services/airflow
      dockerfile: Dockerfile
    container_name: velib-airflow-scheduler
    restart: always
    depends_on:
      - postgres
      - fastapi_big
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      VELIB_FASTAPI_URL: http://fastapi_big:8000
    volumes:
      - ./services/airflow/dags:/opt/airflow/dags
      - ./services/airflow/logs:/opt/airflow/logs
      - ./services/airflow/config:/opt/airflow/config
      - ./services/airflow/plugins:/opt/airflow/plugins
    user: "${AIRFLOW_UID:-50000}:0"
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - velib-network

  # FastAPI service for ML operations
  fastapi_big:
    build:
      context: ./services/big_api
      dockerfile: Dockerfile
      args:
        USE_CUDA: "${USE_CUDA:-false}"
    container_name: velib-fastapi-big
    command: uvicorn --app-dir /app/src fastapi_main:app --host 0.0.0.0 --port 8000
    ports:
      - "8001:8000"
    volumes:
      - ./src:/app/src
      - ./local:/app/local
      - ./data:/app/data
    environment:
      - MLFLOW_TRACKING_URI=http://host.docker.internal:8080
      - GIT_PYTHON_REFRESH=quiet
    networks:
      - velib-network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Streamlit web application
  webapp:
    build:
      context: .
      dockerfile: Dockerfile.webapp
    container_name: velib-webapp
    ports:
      - "8501:8501"
    volumes:
      - ./app:/app/app
      - ./src:/app/src
    environment:
      - BIG_API_URL=http://fastapi_big:8000
    depends_on:
      - fastapi_big
    networks:
      - velib-network

volumes:
  postgres-db-volume:

networks:
  velib-network:
    driver: bridge
